!s32i = !cir.int<s, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc3 = loc("simple_graph.c":8:20)
#loc4 = loc("simple_graph.c":8:26)
#loc5 = loc("simple_graph.c":8:33)
#loc6 = loc("simple_graph.c":8:40)
#loc7 = loc("simple_graph.c":8:48)
#loc8 = loc("simple_graph.c":8:52)
#loc53 = loc("simple_graph.c":20:17)
#loc54 = loc("simple_graph.c":20:24)
#loc55 = loc("simple_graph.c":20:29)
#loc56 = loc("simple_graph.c":20:33)
!rec_Edge = !cir.record<struct "Edge" {!s32i, !s32i, !cir.float} #cir.record.decl.ast>
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc5, #loc6])
#loc80 = loc(fused[#loc7, #loc8])
#loc92 = loc(fused[#loc53, #loc54])
#loc93 = loc(fused[#loc55, #loc56])
module @"/home/victoryang00/CXLMemUring/build/simple_graph.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.legal_int_widths" = array<i32: 8, 16, 32, 64>, "dlti.stack_alignment" = 128 : i64>} {
  cir.func dso_local @process_edges(%arg0: !cir.ptr<!rec_Edge> loc(fused[#loc3, #loc4]), %arg1: !cir.ptr<!cir.float> loc(fused[#loc5, #loc6]), %arg2: !s32i loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!rec_Edge>, !cir.ptr<!cir.ptr<!rec_Edge>>, ["edges", init] {alignment = 8 : i64} loc(#loc78)
    %1 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["output", init] {alignment = 8 : i64} loc(#loc79)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc80)
    cir.store %arg0, %0 : !cir.ptr<!rec_Edge>, !cir.ptr<!cir.ptr<!rec_Edge>> loc(#loc9)
    cir.store %arg1, %1 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc9)
    cir.store %arg2, %2 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc82)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc13)
      cir.store align(4) %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc82)
      cir.for : cond {
        %5 = cir.load align(4) %3 : !cir.ptr<!s32i>, !s32i loc(#loc14)
        %6 = cir.load align(4) %2 : !cir.ptr<!s32i>, !s32i loc(#loc15)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc83)
        cir.condition(%7) loc(#loc16)
      } body {
        cir.scope {
          %5 = cir.load align(8) %0 : !cir.ptr<!cir.ptr<!rec_Edge>>, !cir.ptr<!rec_Edge> loc(#loc18)
          %6 = cir.load align(4) %3 : !cir.ptr<!s32i>, !s32i loc(#loc19)
          %7 = cir.ptr_stride %5, %6 : (!cir.ptr<!rec_Edge>, !s32i) -> !cir.ptr<!rec_Edge> loc(#loc20)
          %8 = cir.get_member %7[2] {name = "weight"} : !cir.ptr<!rec_Edge> -> !cir.ptr<!cir.float> loc(#loc21)
          %9 = cir.load align(4) %8 : !cir.ptr<!cir.float>, !cir.float loc(#loc22)
          %10 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc23)
          %11 = cir.binop(mul, %9, %10) : !cir.float loc(#loc22)
          %12 = cir.load align(8) %1 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc24)
          %13 = cir.load align(8) %0 : !cir.ptr<!cir.ptr<!rec_Edge>>, !cir.ptr<!rec_Edge> loc(#loc25)
          %14 = cir.load align(4) %3 : !cir.ptr<!s32i>, !s32i loc(#loc26)
          %15 = cir.ptr_stride %13, %14 : (!cir.ptr<!rec_Edge>, !s32i) -> !cir.ptr<!rec_Edge> loc(#loc27)
          %16 = cir.get_member %15[1] {name = "to"} : !cir.ptr<!rec_Edge> -> !cir.ptr<!s32i> loc(#loc28)
          %17 = cir.load align(4) %16 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          %18 = cir.ptr_stride %12, %17 : (!cir.ptr<!cir.float>, !s32i) -> !cir.ptr<!cir.float> loc(#loc30)
          cir.store align(4) %11, %18 : !cir.float, !cir.ptr<!cir.float> loc(#loc85)
          cir.scope {
            %19 = cir.load align(4) %3 : !cir.ptr<!s32i>, !s32i loc(#loc33)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc34)
            %21 = cir.cmp(gt, %19, %20) : !s32i, !cir.bool loc(#loc87)
            cir.if %21 {
              %22 = cir.load align(8) %0 : !cir.ptr<!cir.ptr<!rec_Edge>>, !cir.ptr<!rec_Edge> loc(#loc36)
              %23 = cir.load align(4) %3 : !cir.ptr<!s32i>, !s32i loc(#loc37)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc38)
              %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc37)
              %26 = cir.ptr_stride %22, %25 : (!cir.ptr<!rec_Edge>, !s32i) -> !cir.ptr<!rec_Edge> loc(#loc39)
              %27 = cir.get_member %26[2] {name = "weight"} : !cir.ptr<!rec_Edge> -> !cir.ptr<!cir.float> loc(#loc21)
              %28 = cir.load align(4) %27 : !cir.ptr<!cir.float>, !cir.float loc(#loc40)
              %29 = cir.load align(8) %1 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc41)
              %30 = cir.load align(8) %0 : !cir.ptr<!cir.ptr<!rec_Edge>>, !cir.ptr<!rec_Edge> loc(#loc42)
              %31 = cir.load align(4) %3 : !cir.ptr<!s32i>, !s32i loc(#loc43)
              %32 = cir.ptr_stride %30, %31 : (!cir.ptr<!rec_Edge>, !s32i) -> !cir.ptr<!rec_Edge> loc(#loc44)
              %33 = cir.get_member %32[0] {name = "from"} : !cir.ptr<!rec_Edge> -> !cir.ptr<!s32i> loc(#loc45)
              %34 = cir.load align(4) %33 : !cir.ptr<!s32i>, !s32i loc(#loc46)
              %35 = cir.ptr_stride %29, %34 : (!cir.ptr<!cir.float>, !s32i) -> !cir.ptr<!cir.float> loc(#loc47)
              %36 = cir.load align(4) %35 : !cir.ptr<!cir.float>, !cir.float loc(#loc48)
              %37 = cir.binop(add, %36, %28) : !cir.float loc(#loc48)
              cir.store align(4) %37, %35 : !cir.float, !cir.ptr<!cir.float> loc(#loc89)
            } loc(#loc88)
          } loc(#loc86)
        } loc(#loc84)
        cir.yield loc(#loc11)
      } step {
        %5 = cir.load align(4) %3 : !cir.ptr<!s32i>, !s32i loc(#loc49)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc50)
        cir.store align(4) %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc90)
        cir.yield loc(#loc81)
      } loc(#loc81)
    } loc(#loc81)
    cir.return loc(#loc2)
  } loc(#loc77)
  cir.func dso_local @sum_array(%arg0: !cir.ptr<!cir.float> loc(fused[#loc53, #loc54]), %arg1: !s32i loc(fused[#loc55, #loc56])) -> !cir.float extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["arr", init] {alignment = 8 : i64} loc(#loc92)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["n", init] {alignment = 4 : i64} loc(#loc93)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["sum", init] {alignment = 4 : i64} loc(#loc94)
    cir.store %arg0, %0 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc59)
    cir.store %arg1, %1 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    %4 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc58)
    cir.store align(4) %4, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc94)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc96)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc63)
      cir.store align(4) %8, %7 : !s32i, !cir.ptr<!s32i> loc(#loc96)
      cir.for : cond {
        %9 = cir.load align(4) %7 : !cir.ptr<!s32i>, !s32i loc(#loc64)
        %10 = cir.load align(4) %1 : !cir.ptr<!s32i>, !s32i loc(#loc65)
        %11 = cir.cmp(lt, %9, %10) : !s32i, !cir.bool loc(#loc97)
        cir.condition(%11) loc(#loc66)
      } body {
        cir.scope {
          %9 = cir.load align(8) %0 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc68)
          %10 = cir.load align(4) %7 : !cir.ptr<!s32i>, !s32i loc(#loc69)
          %11 = cir.ptr_stride %9, %10 : (!cir.ptr<!cir.float>, !s32i) -> !cir.ptr<!cir.float> loc(#loc70)
          %12 = cir.load align(4) %11 : !cir.ptr<!cir.float>, !cir.float loc(#loc68)
          %13 = cir.load align(4) %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc71)
          %14 = cir.binop(add, %13, %12) : !cir.float loc(#loc71)
          cir.store align(4) %14, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc99)
        } loc(#loc98)
        cir.yield loc(#loc61)
      } step {
        %9 = cir.load align(4) %7 : !cir.ptr<!s32i>, !s32i loc(#loc73)
        %10 = cir.unary(inc, %9) nsw : !s32i, !s32i loc(#loc74)
        cir.store align(4) %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc100)
        cir.yield loc(#loc95)
      } loc(#loc95)
    } loc(#loc95)
    %5 = cir.load align(4) %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc75)
    cir.store %5, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc101)
    %6 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc101)
    cir.return %6 : !cir.float loc(#loc101)
  } loc(#loc91)
} loc(#loc)
#loc = loc("/home/victoryang00/CXLMemUring/build/simple_graph.c":0:0)
#loc1 = loc("simple_graph.c":8:1)
#loc2 = loc("simple_graph.c":18:1)
#loc9 = loc("simple_graph.c":8:59)
#loc10 = loc("simple_graph.c":9:5)
#loc11 = loc("simple_graph.c":17:5)
#loc12 = loc("simple_graph.c":9:10)
#loc13 = loc("simple_graph.c":9:18)
#loc14 = loc("simple_graph.c":9:21)
#loc15 = loc("simple_graph.c":9:25)
#loc16 = loc("simple_graph.c":9:23)
#loc17 = loc("simple_graph.c":9:37)
#loc18 = loc("simple_graph.c":11:31)
#loc19 = loc("simple_graph.c":11:37)
#loc20 = loc("simple_graph.c":11:38)
#loc21 = loc("simple_graph.c":5:11)
#loc22 = loc("simple_graph.c":11:40)
#loc23 = loc("simple_graph.c":11:49)
#loc24 = loc("simple_graph.c":11:9)
#loc25 = loc("simple_graph.c":11:16)
#loc26 = loc("simple_graph.c":11:22)
#loc27 = loc("simple_graph.c":11:23)
#loc28 = loc("simple_graph.c":4:9)
#loc29 = loc("simple_graph.c":11:25)
#loc30 = loc("simple_graph.c":11:27)
#loc31 = loc("simple_graph.c":14:9)
#loc32 = loc("simple_graph.c":16:9)
#loc33 = loc("simple_graph.c":14:13)
#loc34 = loc("simple_graph.c":14:17)
#loc35 = loc("simple_graph.c":14:20)
#loc36 = loc("simple_graph.c":15:38)
#loc37 = loc("simple_graph.c":15:44)
#loc38 = loc("simple_graph.c":15:46)
#loc39 = loc("simple_graph.c":15:47)
#loc40 = loc("simple_graph.c":15:49)
#loc41 = loc("simple_graph.c":15:13)
#loc42 = loc("simple_graph.c":15:20)
#loc43 = loc("simple_graph.c":15:26)
#loc44 = loc("simple_graph.c":15:27)
#loc45 = loc("simple_graph.c":3:9)
#loc46 = loc("simple_graph.c":15:29)
#loc47 = loc("simple_graph.c":15:33)
#loc48 = loc("simple_graph.c":15:35)
#loc49 = loc("simple_graph.c":9:33)
#loc50 = loc("simple_graph.c":9:32)
#loc51 = loc("simple_graph.c":20:1)
#loc52 = loc("simple_graph.c":26:1)
#loc57 = loc("simple_graph.c":21:5)
#loc58 = loc("simple_graph.c":21:17)
#loc59 = loc("simple_graph.c":20:36)
#loc60 = loc("simple_graph.c":22:5)
#loc61 = loc("simple_graph.c":24:5)
#loc62 = loc("simple_graph.c":22:10)
#loc63 = loc("simple_graph.c":22:18)
#loc64 = loc("simple_graph.c":22:21)
#loc65 = loc("simple_graph.c":22:25)
#loc66 = loc("simple_graph.c":22:23)
#loc67 = loc("simple_graph.c":22:33)
#loc68 = loc("simple_graph.c":23:16)
#loc69 = loc("simple_graph.c":23:20)
#loc70 = loc("simple_graph.c":23:21)
#loc71 = loc("simple_graph.c":23:13)
#loc72 = loc("simple_graph.c":23:9)
#loc73 = loc("simple_graph.c":22:29)
#loc74 = loc("simple_graph.c":22:28)
#loc75 = loc("simple_graph.c":25:12)
#loc76 = loc("simple_graph.c":25:5)
#loc77 = loc(fused[#loc1, #loc2])
#loc81 = loc(fused[#loc10, #loc11])
#loc82 = loc(fused[#loc12, #loc13])
#loc83 = loc(fused[#loc14, #loc15])
#loc84 = loc(fused[#loc17, #loc11])
#loc85 = loc(fused[#loc24, #loc23])
#loc86 = loc(fused[#loc31, #loc32])
#loc87 = loc(fused[#loc33, #loc34])
#loc88 = loc(fused[#loc35, #loc32])
#loc89 = loc(fused[#loc41, #loc40])
#loc90 = loc(fused[#loc50, #loc49])
#loc91 = loc(fused[#loc51, #loc52])
#loc94 = loc(fused[#loc57, #loc58])
#loc95 = loc(fused[#loc60, #loc61])
#loc96 = loc(fused[#loc62, #loc63])
#loc97 = loc(fused[#loc64, #loc65])
#loc98 = loc(fused[#loc67, #loc61])
#loc99 = loc(fused[#loc72, #loc70])
#loc100 = loc(fused[#loc74, #loc73])
#loc101 = loc(fused[#loc76, #loc75])
