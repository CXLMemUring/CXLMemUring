!s32i = !cir.int<s, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc3 = loc("simple_add.c":1:18)
#loc4 = loc("simple_add.c":1:24)
#loc5 = loc("simple_add.c":1:27)
#loc6 = loc("simple_add.c":1:33)
#loc13 = loc("simple_add.c":5:14)
#loc14 = loc("simple_add.c":5:18)
#loc15 = loc("simple_add.c":5:21)
#loc16 = loc("simple_add.c":5:25)
#loc22 = loc(fused[#loc3, #loc4])
#loc23 = loc(fused[#loc5, #loc6])
#loc26 = loc(fused[#loc13, #loc14])
#loc27 = loc(fused[#loc15, #loc16])
module @"/home/victoryang00/CXLMemUring/build/simple_add.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.legal_int_widths" = array<i32: 8, 16, 32, 64>, "dlti.stack_alignment" = 128 : i64>} {
  cir.func dso_local @add_floats(%arg0: !cir.float loc(fused[#loc3, #loc4]), %arg1: !cir.float loc(fused[#loc5, #loc6])) -> !cir.float extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["a", init] {alignment = 4 : i64} loc(#loc22)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["b", init] {alignment = 4 : i64} loc(#loc23)
    %2 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__retval"] {alignment = 4 : i64} loc(#loc2)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc7)
    cir.store %arg1, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc7)
    %3 = cir.load align(4) %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc8)
    %4 = cir.load align(4) %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc9)
    %5 = cir.binop(add, %3, %4) : !cir.float loc(#loc8)
    cir.store %5, %2 : !cir.float, !cir.ptr<!cir.float> loc(#loc24)
    %6 = cir.load %2 : !cir.ptr<!cir.float>, !cir.float loc(#loc24)
    cir.return %6 : !cir.float loc(#loc24)
  } loc(#loc21)
  cir.func dso_local @add_ints(%arg0: !s32i loc(fused[#loc13, #loc14]), %arg1: !s32i loc(fused[#loc15, #loc16])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["a", init] {alignment = 4 : i64} loc(#loc26)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["b", init] {alignment = 4 : i64} loc(#loc27)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc12)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc17)
    cir.store %arg1, %1 : !s32i, !cir.ptr<!s32i> loc(#loc17)
    %3 = cir.load align(4) %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    %4 = cir.load align(4) %1 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc18)
    cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc28)
    %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.return %6 : !s32i loc(#loc28)
  } loc(#loc25)
} loc(#loc)
#loc = loc("/home/victoryang00/CXLMemUring/build/simple_add.c":0:0)
#loc1 = loc("simple_add.c":1:1)
#loc2 = loc("simple_add.c":3:1)
#loc7 = loc("simple_add.c":1:36)
#loc8 = loc("simple_add.c":2:12)
#loc9 = loc("simple_add.c":2:16)
#loc10 = loc("simple_add.c":2:5)
#loc11 = loc("simple_add.c":5:1)
#loc12 = loc("simple_add.c":7:1)
#loc17 = loc("simple_add.c":5:28)
#loc18 = loc("simple_add.c":6:12)
#loc19 = loc("simple_add.c":6:16)
#loc20 = loc("simple_add.c":6:5)
#loc21 = loc(fused[#loc1, #loc2])
#loc24 = loc(fused[#loc10, #loc9])
#loc25 = loc(fused[#loc11, #loc12])
#loc28 = loc(fused[#loc20, #loc19])
